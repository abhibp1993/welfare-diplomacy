"""
Description: Given a message table generated by simulate_game.py containing the columns
    `phase, power1, power2, dialogue`, this script generates a CSV with the
    following columns:
        phase,
        power1,
        power2,
        dialogue,
        locations,      # locations discussed in the dialogue between powers 1, 2 during the phase.

Date: 25 Feb 2025

Author: Abhishek N. Kulkarni
"""
import ast
import backoff
import pandas as pd
import time

from openai import OpenAI, OpenAIError
from pathlib import Path
from tqdm import tqdm
from loguru import logger

client = OpenAI()


def load_csv(csv_file_path):
    """
    Load the CSV file containing the message table.
    If the CSV does NOT have the following columns, then exception is raised.
        `phase, round, sender, recipient, message`.

    Args:
        csv_file_path (str): Path to the CSV file.

    Returns:
        pd.DataFrame: DataFrame containing the message table.
    """
    df_ = pd.read_csv(csv_file_path)
    assert set(df_.columns.tolist()) == {"phase", "power1", "power2", "dialogue"}, \
        f"Columns in the CSV file are not as expected. Expected: ['phase', 'power1', 'power2', 'dialogue']"

    return df_


@backoff.on_exception(
    backoff.expo, OpenAIError, max_time=32
)
def completions_with_backoff(**kwargs):
    """Exponential backoff for OpenAI API rate limit errors."""
    response = client.chat.completions.create(**kwargs)
    assert response is not None, "OpenAI response is None"
    return response


def locations(dialogue, model_name="gpt-4o-mini", temperature=0.7, top_p=1.0):
    """
    Given a dialogue, this function extracts all locations discussed in the dialogue.

    Args:
        dialogue (str): Dialogue string.

    Returns:
        list: List of locations discussed in the dialogue.
    """
    system_prompt = f"""
    You are an expert in the game Diplomacy. You have been asked to extract locations mentioned in the given dialogue.
    Return a Python list of unique locations mentioned in the dialogue, and nothing else.
    Expected output: ['location1', 'location2', ...]
    
    Whenever possible, use 3-letter abbreviations (in all caps) of locations used in standard Diplomacy. 
    Example: [AEG, BUD, SMY]
    
    However, if the location is does not have a common abbreviation, use the full name of the location (all caps).
    Example: ['Mediterranean']
    
    As a reference, you may use the following list of locations:
    Location	Location Type	Abbreviation
    ----------------------------------------
    Switzerland,	l	swi switz
    Adriatic Sea,	w	adr adriatic
    Aegean Sea,	w	aeg aegean
    Albania,	l	alb
    Ankara,	T	ank
    Apulia,	l	apu
    Armenia,	l	arm
    Baltic Sea,	w	bal baltic
    Barents Sea,	w	bar barents
    Belgium,	x	bel
    Berlin,	G	ber
    Black Sea,	w	bla black
    Bohemia,	l	boh
    Brest,	F	bre
    Budapest,	A	bud
    Bulgaria,	x	bul
    Burgundy,	l	bur
    Clyde,	l	cly
    Constantinople,	T	con
    Denmark,	x	den
    Eastern Mediterranean,	w	eas emed east eastern
    eastmed ems eme
    Edinburgh,	E	edi
    English Channel,	w	eng english channel ech
    Finland,	l	fin
    Galicia,	l	gal
    Gascony,	l	gas
    Greece,	x	gre
    Gulf of Lyon,	w	lyo gol gulfofl lyon
    Gulf of Bothnia,	w	bot gob both
    gulfofb bothnia
    Helgoland Bight,	w	hel helgoland
    Holland,	x	hol
    Ionian Sea,	w	ion ionian
    Irish Sea,	w	iri irish
    Kiel,	G	kie
    Liverpool,	E	lvp livp lpl
    Livonia,	l	lvn livo lvo lva
    London,	E	lon
    Marseilles,	F	mar mars
    Mid-Atlantic Ocean,	w	mao midatlanticocean
    midatlantic mid mat
    Moscow,	R	mos
    Munich,	G	mun
    Naples,	I	nap
    North Atlantic Ocean,	w	nao nat
    North Africa,	l	naf nora
    North Sea,	w	nth norsea nts
    Norway,	x	nor nwy norw
    Norwegian Sea,	w	nwg norwsea
    nrg norwegian
    Paris,	F	par
    Picardy,	l	pic
    Piedmont,	l	pie
    Portugal,	x	por
    Prussia,	l	pru
    Rome,	I	rom
    Ruhr,	l	ruh
    Rumania,	x	rum
    Serbia,	x	ser
    Sevastopol,	R	sev sevastapol
    Silesia,	l	sil
    Skagerrak,	w	ska
    Smyrna,	T	smy
    Spain,	x	spa
    St Petersburg,	R	stp
    Sweden,	x	swe
    Syria,	l	syr
    Trieste,	A	tri
    Tunis,	x	tun
    Tuscany,	l	tus
    Tyrolia,	l	tyr tyl trl
    Tyrrhenian Sea,	w	tys tyrr
    tyrrhenian tyn tyh
    Ukraine,	l	ukr
    Venice,	I	ven
    Vienna,	A	vie
    Wales,	l	wal
    Warsaw,	R	war
    Western Mediterranean,	w	wes wmed west western
    westmed wms wme
    Yorkshire,	l	yor york yonkers
    """

    user_prompt = f"""
        Extract locations mentioned in the following Diplomacy game dialogue:
        {dialogue}
    """

    try:
        start_time = time.time()
        response = completions_with_backoff(
            model=model_name,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt},
            ],
            temperature=temperature,
            top_p=top_p,
        )
        completion = response.choices[0].message.content  # type: ignore
        usage = response.usage  # type: ignore
        completion_time_sec = time.time() - start_time
        # print(dict(
        #     completion=completion,
        #     completion_time_sec=completion_time_sec,
        #     prompt_tokens=usage.prompt_tokens,
        #     completion_tokens=usage.completion_tokens,
        #     total_tokens=usage.total_tokens,
        #     cached_tokens=usage.prompt_tokens_details.cached_tokens,
        # ))

    except Exception as exc:  # pylint: disable=broad-except
        print(
            "Error completing prompt ending in\n%s\n\nException:\n%s",
            user_prompt[-300:],
            exc,
        )
        raise

    try:
        return ast.literal_eval(completion)  # Convert string to list
    except:
        return []  # Return empty list in case of parsing errors


def extract_locations(df):
    """
    Given a DataFrame containing the message table, this function extracts all locations
    discussed in the dialogues exchanged between pairs of participants in each phase.

    Args:
        df (pd.DataFrame): DataFrame containing the message table.

    Returns:
        pd.DataFrame: DataFrame with added column `locations` containing the locations discussed in the dialogue.
    """
    rows = []
    for _, row in tqdm(df.iterrows(), total=len(df), desc="Extracting locations from dialogue"):
        rows.append(locations(row["dialogue"]))
    df["locations"] = rows
    print(df)
    return df


if __name__ == '__main__':
    # Load the CSV file
    csv_file_path = Path(__file__).resolve().parents[1] / "games" / "5-light-haze"
    input_df = load_csv(csv_file_path / "5-light-haze-aggregate-msg-table.csv")

    # Extract locations
    output_df = extract_locations(input_df)

    # Save to CSV
    output_df.to_csv(csv_file_path / "5-light-haze-aggregate-msg-table.csv", index=False)
    logger.success(f"Extracted locations updated in {csv_file_path / '5-light-haze-aggregate-msg-table.csv'}")