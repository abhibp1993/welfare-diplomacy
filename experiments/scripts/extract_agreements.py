"""
Description: Given a message table generated by simulate_game.py containing the columns
    `phase, power1, power2, dialogue`, this script generates a CSV with the
    following columns:
        phase,
        power1,
        power2,
        dialogue,
        locations,
        units,
        agreements

Date: 25 Feb 2025

Author: Abhishek N. Kulkarni
"""
import ast
import json

import backoff
import pandas as pd
import time
# import diplomacy

from openai import OpenAI, OpenAIError
from pathlib import Path
from tqdm import tqdm
from loguru import logger
from diplomacy.utils.export import load_saved_games_from_disk, from_saved_game_format

client = OpenAI()


def load_csv(csv_file_path):
    """
    Load the CSV file containing the message table.
    If the CSV does NOT have the following columns, then exception is raised.
        `phase, round, sender, recipient, message`.

    Args:
        csv_file_path (str): Path to the CSV file.

    Returns:
        pd.DataFrame: DataFrame containing the message table.
    """
    df_ = pd.read_csv(csv_file_path)
    assert set(df_.columns.tolist()) == {"phase", "power1", "power2", "dialogue", "locations", "all_units"}, \
        f"Columns in the CSV file are not as expected. Expected: ['phase', 'power1', 'power2', 'dialogue', 'locations', 'all_units']"

    return df_


@backoff.on_exception(
    backoff.expo, OpenAIError, max_time=32
)
def completions_with_backoff(**kwargs):
    """Exponential backoff for OpenAI API rate limit errors."""
    response = client.chat.completions.create(**kwargs)
    assert response is not None, "OpenAI response is None"
    return response


def get_agreements(dialogue, locations, valid_units, model_name="gpt-4o-mini", temperature=0.7, top_p=1.0):
    """
    Given a dialogue, this function extracts all locations discussed in the dialogue.

    Args:
        dialogue (str): Dialogue string.
        locations (list): List of locations mentioned in the dialogue.
        valid_units (list): List of valid units in the current phase.

    Returns:
        list: List of locations discussed in the dialogue.
    """
    system_prompt = f"""
    You are an expert in the game Diplomacy (standard).  
    You will be given a dialogue between two powers and a list of locations and units mentioned in the dialogue.
    Your task is to extract the agreements/contracts discussed by two powers. 
    An agreement is defined as a promise between two powers to perform certain actions in the game.
    
    Your response should be a list of agreements/contracts discussed in the dialogue, and nothing else.
    
    Example: [("support", "Italy", "Austria", "F NAP", "A BUD"), ("move", "France", "Germany", "A PAR - BER", "A PAR H"), ...]
    """

    """
    For example, if Italy will support a unit in BUD with its unit in NAP, then the agreement would be: ("support", "Italy", "Austria", "NAP", "BUD").
    """

    user_prompt = f"""
        Extract agreements mentioned in the following Diplomacy game dialogue:
        {dialogue}
        
        For reference, the locations mentioned in the dialogue are: 
        {locations}
        
        For reference, the units mentioned in the dialogue are:
        {valid_units}
    """

    try:
        start_time = time.time()
        response = completions_with_backoff(
            model=model_name,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt},
            ],
            temperature=temperature,
            top_p=top_p,
        )
        completion = response.choices[0].message.content  # type: ignore
        usage = response.usage  # type: ignore
        completion_time_sec = time.time() - start_time
        print(dict(
            completion=completion,
            completion_time_sec=completion_time_sec,
            prompt_tokens=usage.prompt_tokens,
            completion_tokens=usage.completion_tokens,
            total_tokens=usage.total_tokens,
            cached_tokens=usage.prompt_tokens_details.cached_tokens,
        ))

    except Exception as exc:  # pylint: disable=broad-except
        print(
            "Error completing prompt ending in\n%s\n\nException:\n%s",
            user_prompt[-300:],
            exc,
        )
        raise

    try:
        return ast.literal_eval(completion)  # Convert string to list
    except:
        return []  # Return empty list in case of parsing errors


def extract_agreements(df, game):
    """
    Given a DataFrame containing the message table, this function extracts all units
    discussed in the dialogues exchanged between pairs of participants in each phase.

    Args:
        df (pd.DataFrame): DataFrame containing the message table.
        game (dict): Serialized diplomacy game object.

    Returns:
        pd.DataFrame: DataFrame with added column `all_units` containing the units discussed in the dialogue.
    """
    rows = []
    for _, row in tqdm(df.iterrows(), total=len(df), desc="Extracting locations from dialogue"):
        # Get phase name
        phase_name = row["phase"]

        # Extract phase dictionary from game json
        phase = [phase for phase in game["phases"] if phase["name"] == phase_name].pop(0)

        # Determine valid units in current phase
        phase_units = phase["state"]["units"]
        valid_units = set.union(*list(map(set, phase_units.values())))
        # print(valid_units)

        # Extract units from dialogue
        agmts_in_dialogue = get_agreements(dialogue=row["dialogue"], locations=row["locations"], valid_units=valid_units)

        # Add units to rows
        rows.append(agmts_in_dialogue)

    df["agreements"] = rows
    print(df)
    return df


if __name__ == '__main__':
    csv_file_path = Path(__file__).resolve().parents[1] / "games" / "5-light-haze"

    # Load diplomacy game
    with open(csv_file_path / "game-light-haze-5.json", "r") as output_file:
        game_json = json.load(output_file)
    # game = from_saved_game_format(game_json)
    # logger.success(f"Loaded game:{game.game_id} from disk")
    # exit()

    # Load the CSV file
    input_df = load_csv(csv_file_path / "5-light-haze-msg-table-units.csv")

    # Extract locations
    output_df = extract_agreements(input_df, game_json)

    # Save to CSV
    output_df.to_csv(csv_file_path / "5-light-haze-msg-table-agmts.csv", index=False)
    logger.success(f"Extracted locations updated in {csv_file_path / '5-light-haze-msg-table-agmts.csv'}")
